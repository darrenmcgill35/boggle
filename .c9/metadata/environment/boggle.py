{"filter":false,"title":"boggle.py","tooltip":"/boggle.py","undoManager":{"mark":12,"position":12,"stack":[[{"start":{"row":0,"column":0},"end":{"row":6,"column":32},"action":"insert","lines":["def make_grid(width, height):","    \"\"\"","    Creates a grid that will hold all of the tiles","    for a boggle game","    \"\"\"","    return {(row, col): ' ' for row in range(height)","        for col in range(width)}"],"id":1}],[{"start":{"row":5,"column":4},"end":{"row":6,"column":32},"action":"remove","lines":["return {(row, col): ' ' for row in range(height)","        for col in range(width)}"],"id":2},{"start":{"row":5,"column":4},"end":{"row":7,"column":32},"action":"insert","lines":[" return {(row, col): choice(ascii_uppercase)","        for row in range(height)","        for col in range(width)}"]}],[{"start":{"row":0,"column":0},"end":{"row":1,"column":0},"action":"insert","lines":["",""],"id":3},{"start":{"row":1,"column":0},"end":{"row":2,"column":0},"action":"insert","lines":["",""]},{"start":{"row":2,"column":0},"end":{"row":3,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":0,"column":0},"end":{"row":1,"column":0},"action":"remove","lines":["",""],"id":4},{"start":{"row":0,"column":0},"end":{"row":1,"column":25},"action":"insert","lines":["from string import ascii_uppercase","from random import choice"]}],[{"start":{"row":8,"column":4},"end":{"row":8,"column":5},"action":"remove","lines":[" "],"id":5}],[{"start":{"row":10,"column":32},"end":{"row":11,"column":0},"action":"insert","lines":["",""],"id":6},{"start":{"row":11,"column":0},"end":{"row":11,"column":8},"action":"insert","lines":["        "]},{"start":{"row":11,"column":8},"end":{"row":12,"column":0},"action":"insert","lines":["",""]},{"start":{"row":12,"column":0},"end":{"row":12,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":12,"column":4},"end":{"row":12,"column":8},"action":"remove","lines":["    "],"id":7},{"start":{"row":12,"column":0},"end":{"row":12,"column":4},"action":"remove","lines":["    "]},{"start":{"row":11,"column":8},"end":{"row":12,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":11,"column":8},"end":{"row":12,"column":0},"action":"insert","lines":["",""],"id":8},{"start":{"row":12,"column":0},"end":{"row":12,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":12,"column":4},"end":{"row":12,"column":8},"action":"remove","lines":["    "],"id":9},{"start":{"row":12,"column":0},"end":{"row":12,"column":4},"action":"remove","lines":["    "]}],[{"start":{"row":12,"column":0},"end":{"row":50,"column":21},"action":"insert","lines":["def neighbours_of_position(coords):","    \"\"\"","    Get neighbours of a given position","    \"\"\"","    row = coords[0]","    col = coords[1]","","    # Assign each of the neighbours","    # Top-left to top-right","    top_left = (row - 1, col - 1)","    top_center = (row - 1, col)","    top_right = (row - 1, col + 1)","","    # Left to right","    left = (row, col - 1)","    # The `(row, col)` coordinates passed to this","    # function are situated here","    right = (row, col + 1)","","    # Bottom-left to bottom-right","    bottom_left = (row + 1, col -1)","    bottom_center = (row + 1, col)","    bottom_right = (row + 1, col + 1)","","    return [top_left, top_center, top_right,","            left, right,","            bottom_left, bottom_center, bottom_right]","","","def all_grid_neighbours(grid):","    \"\"\"","    Get all of the possible neighbours for each position in","    the grid","    \"\"\"","    neighbours = {}","    for position in grid:","        position_neighbours = neighbours_of_position(position)","        neighbours[position] = [p for p in position_neighbours if p in grid]","    return neighbours"],"id":10}],[{"start":{"row":50,"column":21},"end":{"row":51,"column":0},"action":"insert","lines":["",""],"id":11},{"start":{"row":51,"column":0},"end":{"row":51,"column":4},"action":"insert","lines":["    "]},{"start":{"row":51,"column":4},"end":{"row":52,"column":0},"action":"insert","lines":["",""]},{"start":{"row":52,"column":0},"end":{"row":52,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":52,"column":0},"end":{"row":52,"column":4},"action":"remove","lines":["    "],"id":12}],[{"start":{"row":52,"column":0},"end":{"row":89,"column":45},"action":"insert","lines":["def path_to_word(grid, path):","    \"\"\"","    Add all of the letters on the path to a string","    \"\"\"","    return ''.join([grid[p] for p in path])","","","def search(grid, dictionary):","    \"\"\"","    Search thrugh the paths to locate words by matching","    strings to words in a dictionary","    \"\"\"","    neighbours = all_grid_neighbours(grid)","    paths = []","","    def do_search(path):","        word = path_to_word(grid, path)","        if word in dictionary:","            paths.append(path)","        for next_pos in neighbours[path[-1]]:","            if next_pos not in path:","                do_search(path + [next_pos])","    ","    for position in grid:","        do_search([position])","    ","    words = []","    for path in paths:","        words.append(path_to_word(grid, path))","    return set(words)","","","def get_dictionary(dictionary_file):","    \"\"\"","    Load dictionary file","    \"\"\"","    with open(dictionary_file) as f:","        return [w.strip().upper() for w in f]"],"id":13}]]},"ace":{"folds":[],"scrolltop":936.5,"scrollleft":0,"selection":{"start":{"row":86,"column":24},"end":{"row":86,"column":24},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":79,"state":"start","mode":"ace/mode/python"}},"timestamp":1568741831442,"hash":"a327633b1877578ffe45d211e297abc8f581f01a"}