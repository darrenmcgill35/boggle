{"filter":false,"title":"test_boggle.py","tooltip":"/test_boggle.py","undoManager":{"mark":17,"position":17,"stack":[[{"start":{"row":0,"column":0},"end":{"row":6,"column":30},"action":"insert","lines":["import unittest","","","class test_boggle(unittest.TestCase):","","    def test_is_this_thing_on(self):","        self.assertEqual(1, 1)"],"id":1}],[{"start":{"row":0,"column":0},"end":{"row":6,"column":30},"action":"remove","lines":["import unittest","","","class test_boggle(unittest.TestCase):","","    def test_is_this_thing_on(self):","        self.assertEqual(1, 1)"],"id":2}],[{"start":{"row":0,"column":0},"end":{"row":30,"column":38},"action":"insert","lines":["import unittest","import boggle","","","class TestBoggle(unittest.TestCase):","    \"\"\"","    Our test suite for boggle solver","    \"\"\"","","    def test_can_create_an_empty_grid(self):","        \"\"\"","        Test to see if we can create an empty grid","        \"\"\"","        grid = boggle.make_grid(0, 0)","        self.assertEqual(len(grid), 0)","    ","    def test_grid_size_width_times_height(self):","        \"\"\"","        Test is to ensure that the total size of the grid","        is equal to width * height","        \"\"\"","        grid = boggle.make_grid(2, 3)","        self.assertEqual(len(grid), 6)","    ","    def test_grid_coordinates(self):","        grid = boggle.make_grid(2, 2)","        self.assertIn((0, 0), grid)","        self.assertIn((0, 1), grid)","        self.assertIn((1, 0), grid)","        self.assertIn((1, 1), grid)","        self.assertNotIn((2, 2), grid)"],"id":3}],[{"start":{"row":1,"column":13},"end":{"row":2,"column":0},"action":"insert","lines":["",""],"id":4}],[{"start":{"row":2,"column":0},"end":{"row":2,"column":34},"action":"insert","lines":["from string import ascii_uppercase"],"id":5}],[{"start":{"row":31,"column":38},"end":{"row":32,"column":0},"action":"insert","lines":["",""],"id":6},{"start":{"row":32,"column":0},"end":{"row":32,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":32,"column":8},"end":{"row":33,"column":0},"action":"insert","lines":["",""],"id":7},{"start":{"row":33,"column":0},"end":{"row":33,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":33,"column":4},"end":{"row":33,"column":8},"action":"remove","lines":["    "],"id":8}],[{"start":{"row":33,"column":4},"end":{"row":40,"column":50},"action":"insert","lines":["def test_grid_is_filled_with_letters(self):","        \"\"\"","        Ensure that each of the coordinates in the grid","        contains letters","        \"\"\"","        grid = boggle.make_grid(2, 3)","        for letter in grid.values():","            self.assertIn(letter, ascii_uppercase)"],"id":9}],[{"start":{"row":40,"column":50},"end":{"row":41,"column":0},"action":"insert","lines":["",""],"id":10},{"start":{"row":41,"column":0},"end":{"row":41,"column":12},"action":"insert","lines":["            "]}],[{"start":{"row":41,"column":12},"end":{"row":42,"column":0},"action":"insert","lines":["",""],"id":11},{"start":{"row":42,"column":0},"end":{"row":42,"column":12},"action":"insert","lines":["            "]},{"start":{"row":42,"column":12},"end":{"row":43,"column":0},"action":"insert","lines":["",""]},{"start":{"row":43,"column":0},"end":{"row":43,"column":12},"action":"insert","lines":["            "]}],[{"start":{"row":43,"column":8},"end":{"row":43,"column":12},"action":"remove","lines":["    "],"id":12},{"start":{"row":43,"column":4},"end":{"row":43,"column":8},"action":"remove","lines":["    "]}],[{"start":{"row":43,"column":4},"end":{"row":44,"column":25},"action":"insert","lines":["from string import ascii_uppercase","from random import choice"],"id":13}],[{"start":{"row":43,"column":5},"end":{"row":44,"column":25},"action":"remove","lines":["rom string import ascii_uppercase","from random import choice"],"id":14},{"start":{"row":43,"column":4},"end":{"row":43,"column":5},"action":"remove","lines":["f"]}],[{"start":{"row":43,"column":4},"end":{"row":69,"column":73},"action":"insert","lines":["def test_neighbours_of_a_position(self):","        \"\"\"","        Ensure that a position has 8 neighbours","        \"\"\"","        coords = (1, 2)","        neighbours = boggle.neighbours_of_position(coords)","        self.assertIn((0, 1), neighbours)","        self.assertIn((0, 2), neighbours)","        self.assertIn((0, 3), neighbours)","        self.assertIn((1, 1), neighbours)","        self.assertIn((1, 3), neighbours)","        self.assertIn((2, 1), neighbours)","        self.assertIn((2, 2), neighbours)","        self.assertIn((2, 3), neighbours)","    ","","    def test_all_grid_neighbours(self):","        \"\"\"","        Ensure that all of the grid positions have neighbours","        \"\"\"","        grid = boggle.make_grid(2, 2)","        neighbours = boggle.all_grid_neighbours(grid)","        self.assertEqual(len(neighbours), len(grid))","        for pos in grid:","            others = list(grid) # create a new list from the dictionary's keys","            others.remove(pos)","            self.assertListEqual(sorted(neighbours[pos]), sorted(others))"],"id":15}],[{"start":{"row":69,"column":73},"end":{"row":70,"column":0},"action":"insert","lines":["",""],"id":16},{"start":{"row":70,"column":0},"end":{"row":70,"column":12},"action":"insert","lines":["            "]},{"start":{"row":70,"column":12},"end":{"row":71,"column":0},"action":"insert","lines":["",""]},{"start":{"row":71,"column":0},"end":{"row":71,"column":12},"action":"insert","lines":["            "]}],[{"start":{"row":71,"column":8},"end":{"row":71,"column":12},"action":"remove","lines":["    "],"id":17},{"start":{"row":71,"column":4},"end":{"row":71,"column":8},"action":"remove","lines":["    "]}],[{"start":{"row":71,"column":4},"end":{"row":103,"column":46},"action":"insert","lines":["def test_converting_a_path_to_a_word(self):","        \"\"\"","        Ensure that paths can be converted to words","        \"\"\"","        grid = boggle.make_grid(2, 2)","        oneLetterWord = boggle.path_to_word(grid, [(0, 0)])","        twoLetterWord = boggle.path_to_word(grid, [(0, 0), (1, 1)])","        self.assertEqual(oneLetterWord, grid[(0, 0)])","        self.assertEqual(twoLetterWord, grid[(0, 0)] + grid[(1, 1)])","    ","    def test_search_grid_for_words(self):","        \"\"\"","        Ensure that certain patterns can be found in a `path_to_word`","        \"\"\"","        grid = {(0, 0): 'A', (0, 1): 'B', (1, 0): 'C', (1, 1): 'D'}","        twoLetterWord = 'AB'","        threeLetterWord = 'ABC'","        notThereWord = 'EEE'","        dictionary = [twoLetterWord, threeLetterWord, notThereWord]","","        foundWords = boggle.search(grid, dictionary)","","        self.assertTrue(twoLetterWord in foundWords)","        self.assertTrue(threeLetterWord in foundWords)","        self.assertTrue(notThereWord not in foundWords)","    ","    def test_load_dictionary(self):","        \"\"\"","        Test that the `get_dictionary` function returns a dictionary","        that has a length greater than 0","        \"\"\"","        dictionary = boggle.get_dictionary('words.txt')","        self.assertGreater(len(dictionary), 0)"],"id":18}]]},"ace":{"folds":[],"scrolltop":1132.5,"scrollleft":0,"selection":{"start":{"row":97,"column":35},"end":{"row":97,"column":35},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":89,"state":"start","mode":"ace/mode/python"}},"timestamp":1568741834980,"hash":"be0d9ff6eb2c7287e2f6d91c07e47edbb44dd190"}